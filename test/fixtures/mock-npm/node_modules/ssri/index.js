const stream = require('stream')

const knownSpecs = {}

module.exports.mockIntegrity = mockIntegrity
function mockIntegrity() {
  const chars = []
  for (let i = 0; i < 86; ++i) {
    let value = Math.floor(Math.random() * (122 + 1 - 48)) + 48
    if (value > 57 && value < 65) {
      if (value == 58) chars.push('+') // make this char rare
      else chars.push(String.fromCharCode(value + 6))
    }
    else if (value > 90 && value < 97) {
      if (value == 91) chars.push('/') // make this char rare
      else chars.push(String.fromCharCode(value + 6))
    }
    else chars.push(String.fromCharCode(value))
  }
  return [ 'sha512-', chars.join(''), '==' ].join('')
}

module.exports.integrityStream = opts => {
  // alt-git passes this.opts, which includes cache, multipleRefs, noShrinkwrap.
  // Sometimes we add spec to this, so that we can return the same integrity
  // value as for a previous call.
  const mockStream = new stream.Writable({
    write: function(chunk, encoding, cb) {
      this.emit('data', 'ignore this')
      cb(null)
    }
  })
  mockStream.on('finish', function() {
    let integrity
    if (opts.spec) {
      integrity = knownSpecs[opts.spec]
      if (!integrity)
        integrity = knownSpecs[opts.spec] = mockIntegrity()
    }
    this.emit('integrity', integrity || mockIntegrity())
  })
  return mockStream
}
