const config = {
  name: 'dummy',
  version: '1.0.0',
  scripts: null,
  devDeps: {}
}

module.exports = readJson

function readJson(file, log_, strict_, cb_) {
  // This is the most byzantine argument processing I've seen in npm code.
  // It seems to allow for any number of arguments, where the expected ones
  // can show up in any order, as long as the last one is the callback.
  // It's copied directly from the real thing.
  var log, strict, cb
  for (var i = 1; i < arguments.length - 1; i++) {
    if (typeof arguments[i] === 'boolean') {
      strict = arguments[i]
    } else if (typeof arguments[i] === 'function') {
      log = arguments[i]
    }
  }
  if (!log) log = function () {}
  cb = arguments[ arguments.length - 1 ]

  const pj = {
    "description": "ignore this",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/mmraff/npm-two-stage.git"
    },
    "keywords": [
      "mock",
      "npm"
    ],
    "author": "Matthew Rafferty",
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/mmraff/npm-two-stage/issues"
    },
    "homepage": "https://github.com/mmraff/npm-two-stage#readme"
  }
  pj.name = config.name
  pj.version = config.version
  if (config.devDeps)
    pj.devDependencies = Object.assign({}, config.devDeps)
  if (config.scripts)
    pj.scripts = Object.assign({}, config.scripts)
  cb(null, pj)
}

readJson.setTestCase = function(opts) {
  if (opts.name && typeof opts.name == 'string')
    config.name = opts.name
  else config.name = 'dummy'

  if (opts.version && typeof opts.version == 'string')
    config.version = opts.version
  else config.version = '1.0.0'

  if (opts.scripts)
    switch (typeof opts.scripts) {
      case 'boolean':
        config.scripts = {}
        break
      case 'string':
        config.scripts = {}
        // Make it nice and safe
        config.scripts[opts.scripts] = `echo ${opts.scripts}`
        break
      default:
        return cb(new Error('Unsupported scripts option'))
    }
  else delete config.scripts

  if (opts.devDeps && typeof opts.devDeps == 'object')
    config.devDeps = Object.assign({}, opts.devDeps)
  else delete config.devDeps
}
