const stream = require('stream')
const Fetcher = require('./fetcher.js')

const _tarballFromResolved = Symbol.for('pacote.Fetcher._tarballFromResolved')

const errorStates = {
  _tarballFromResolved: { doThrow: false }
}

function mockError(code) {
  const err = new Error("mock DirFetcher error")
  if (code) err.code = code
  return err
}

module.exports = class DirFetcher extends Fetcher {
  constructor (spec, opts) {
    super(spec, opts)
    // just the fully resolved filename
    this.resolved = this.spec.fetchSpec
  }

  [_tarballFromResolved]() {
    // Actual method returns a "directory stream"
    const r = new stream.Readable({
      read: function() {
        if (errorStates._tarballFromResolved.doThrow)
          return this.emit(
            'error', mockError(errorStates._tarballFromResolved.code)
          )
        //console.log('The readable _read was called') // confirmed
        this.push('mock data')
        this.push(null)
      }
    })
    return r
  }
}

module.exports.setErrorState = function(fnName, state, code) {
  if (!errorStates[fnName])
    throw new SyntaxError(`Unrecognized method name "${fnName}"`)
  errorStates[fnName].doThrow = state
  errorStates[fnName].code = code
}
