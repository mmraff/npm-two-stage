const config = {}
const errorCfg = { // Only one function to configure: finalizeManifest
  throwIt: false
}

/*
  Properties expected on resolved value:
    _resolved, _integrity, _ref (which must have sha and allRefs props)
    ===> there's a check for _resolved in processNpmRegistryItem, like we already
      dealt with in dl_item-agents_test
    ===> we don't need to deal with _ref here, because it's handled in download.js
  Optional, to be provided for specific test cases:
    _shrinkwrap (may or may not have dependencies prop),
    bundleDependencies, devDependencies, optionalDependencies, peerDependencies?
*/
module.exports = function (pkg, spec, opts) {
  if (errorCfg.throwIt) {
    const err = new Error('Dummy error from pacote finalize-manifest mock')
    if (errorCfg.code) err.code = errorCfg.code
    return Promise.reject(err)
  }

  const testData = config[spec.rawSpec]
  if (!testData)
    return Promise.reject(
      new Error(`spec ${spec.rawSpec} is unknown to mock finalizeManifest!`)
    )

  const result = Object.assign({}, testData, pkg)
  if (!pkg._integrity && pkg._integrity !== false)
    result._integrity = 'fakeIntegrityValueSetInMockPacoteFinalizeManifest'
  if (result._ref) delete result._ref
  return Promise.resolve(result)
}

module.exports.setTestConfig = function(data) {
  for (let prop in config) delete config[prop]
  for (let spec in data)
    config[spec] = data[spec]
}
module.exports.setErrorState = (state, errCode) => {
  errorCfg.throwIt = state
  errorCfg.code = errCode
}
